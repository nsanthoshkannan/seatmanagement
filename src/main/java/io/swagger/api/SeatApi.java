/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Floor;
import io.swagger.model.Seat;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-03-03T07:11:12.073Z")

@Api(value = "seat", description = "the seat API")
@RequestMapping(value = "/v2")
public interface SeatApi {

    @ApiOperation(value = "Add new Seat details", nickname = "addSeat", notes = "", tags={ "Seat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/seat",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSeat(@ApiParam(value = "Seat details that needs to be added to a Floor" ,required=true )  @Valid @RequestBody Seat body);


    @ApiOperation(value = "Deletes a Seat", nickname = "deleteSeat", notes = "", tags={ "Seat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Floor not found") })
    @RequestMapping(value = "/seat/{seatId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSeat(@ApiParam(value = "Floor id to delete",required=true) @PathVariable("seatId") Long seatId);


    @ApiOperation(value = "Find Seat by ID", nickname = "getSeatById", notes = "Returns a single Seat Details", response = Floor.class, tags={ "Seat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Floor.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Floor not found") })
    @RequestMapping(value = "/seat/{seatId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Seat> getSeatById(@ApiParam(value = "ID of Seat to return",required=true) @PathVariable("seatId") Long seatId);


    @ApiOperation(value = "Returns all Floor details", nickname = "getSeats", notes = "Returns all Seat details", response = Seat.class, responseContainer = "List", tags={ "Seat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Seat.class, responseContainer = "List") })
    @RequestMapping(value = "/seat",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Seat>> getSeats();


    @ApiOperation(value = "Update an existing Seat", nickname = "updateSeat", notes = "", tags={ "Seat", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/seat",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSeat(@ApiParam(value = "Seat details that needs to be added to a Floor" ,required=true )  @Valid @RequestBody Seat body);

}
