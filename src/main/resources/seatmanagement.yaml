swagger: "2.0"
info:
  description: "This is a prototype of Seat Management product APIs. It has only few APIs defined"
  version: "1.0.0"
  title: "Seat Management"
  contact:
    email: "nsanthoshkannan@gmail.com"

host: "localhost"
basePath: "/v2"
tags:
- name: "Floor"
  description: "Floors in Company"
- name: "Seat"
  description: "Seat information including Floor, seat number etc."
- name: "user"
  description: "Users of the system"
schemes:
- "https"
- "http"
paths:
  /floor:
    post:
      tags:
      - "Floor"
      summary: "Add a new Floor details"
      description: ""
      operationId: "addFloor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Floor details that needs to be added to the Company"
        required: true
        schema:
          $ref: "#/definitions/Floor"
      responses:
        "405":
          description: "Invalid input"

    put:
      tags:
      - "Floor"
      summary: "Update an existing floor"
      description: ""
      operationId: "updateFloor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Floor details that needs to be added to the Company"
        required: true
        schema:
          $ref: "#/definitions/Floor"
      responses:
        "400":
          description: "Invalid ID supplied"
        "405":
          description: "Invalid input"
    get:
      tags:
      - "Floor"
      summary: "Returns all Floor details"
      description: "Returns all Floor details"
      operationId: "getFloors"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Floor"
            type: "array"


  /floor/{floorId}:
    get:
      tags:
      - "Floor"
      summary: "Find Floor by ID"
      description: "Returns a single Floor Details"
      operationId: "getFloorById"
      produces:
      - "application/json"
      parameters:
      - name: "floorId"
        in: "path"
        description: "ID of Floor to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Floor"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Floor not found"
    delete:
      tags:
      - "Floor"
      summary: "Deletes a Floor"
      description: ""
      operationId: "deleteFloor"
      produces:
      - "application/json"
      parameters:
      - name: "floorId"
        in: "path"
        description: "Floor id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Floor not found"

  /seat:
    post:
      tags:
      - "Seat"
      summary: "Add new Seat details"
      description: ""
      operationId: "addSeat"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Seat details that needs to be added to a Floor"
        required: true
        schema:
          $ref: "#/definitions/Seat"
      responses:
        "405":
          description: "Invalid input"

    put:
      tags:
      - "Seat"
      summary: "Update an existing Seat"
      description: ""
      operationId: "updateSeat"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Seat details that needs to be added to a Floor"
        required: true
        schema:
          $ref: "#/definitions/Seat"
      responses:
        "400":
          description: "Invalid ID supplied"
        "405":
          description: "Invalid input"
    get:
      tags:
      - "Seat"
      summary: "Returns all Floor details"
      description: "Returns all Seat details"
      operationId: "getSeats"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/Seat"
            type: "array"          

  /seat/{seatId}:
    get:
      tags:
      - "Seat"
      summary: "Find Seat by ID"
      description: "Returns a single Seat Details"
      operationId: "getSeatById"
      produces:
      - "application/json"
      parameters:
      - name: "seatId"
        in: "path"
        description: "ID of Seat to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Floor"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Floor not found"
    delete:
      tags:
      - "Seat"
      summary: "Deletes a Seat"
      description: ""
      operationId: "deleteSeat"
      produces:
      - "application/json"
      parameters:
      - name: "seatId"
        in: "path"
        description: "Floor id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Floor not found"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      Name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      mobile:
        type: "string"
      dob:
        type: "string"
        format: "date"
  Floor:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "First FLoor"
      description:
        type: "string"
        description: "More info on the floor"
      updatedtime:
        type: "string"
        format: "date-time"
        
  Seat:
    type: "object"
    required:
    - "floorid"
    - "seatnumber"
    properties:
      id:
        type: "integer"
        format: "int64"
      floorid:
        type: "integer"
        format: "int64" 
      seatnumber:
        type: "integer"
        format: "int64"        
      description:
        type: "string"
        description: "More info on the Seat"  
      status:
        type: "string"
        description: "Status of the Seat"   
      updatedtime:
        type: "string"
        format: "date-time"

